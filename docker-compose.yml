version: "3.4"

services:
  php:
    build:
      context: ./api_platform/api
      target: api_platform_php
    depends_on:
      - database
    restart: unless-stopped
    volumes:
      - php_socket:/var/run/php
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    networks:
      - micro-service

  composer:
    image: composer:1.9.0
    command: install
    depends_on:
      - php
    volumes:
      - php_socket:/var/run/php

  pwa:
    build:
      context: ./api_platform/pwa
      target: api_platform_pwa_prod
    environment:
      API_PLATFORM_CLIENT_GENERATOR_ENTRYPOINT: http://caddy
      NEXT_PUBLIC_ENTRYPOINT: http://caddy

  caddy:
    build:
      context: ./api_platform/api
      target: api_platform_caddy
    depends_on:
      - php
      - pwa
    environment:
      PWA_UPSTREAM: pwa:3000
      SERVER_NAME: ${SERVER_NAME:-localhost, caddy:80}
      MERCURE_PUBLISHER_JWT_KEY: ${MERCURE_PUBLISHER_JWT_KEY:-!ChangeMe!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${MERCURE_SUBSCRIBER_JWT_KEY:-!ChangeMe!}
    restart: unless-stopped
    volumes:
      - php_socket:/var/run/php
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - micro-service
    ports:
      # HTTP
      - target: 80
        published: 80
        protocol: tcp
      # HTTPS
      - target: 443
        published: 443
        protocol: tcp
      # HTTP/3
      - target: 443
        published: 443
        protocol: udp

  database:
    image: postgres:13-alpine
    networks:
      - micro-service
    environment:
      - POSTGRES_DB=api
      - POSTGRES_PASSWORD=!ChangeMe!
      - POSTGRES_USER=api-platform
    volumes:
      - db_data:/var/lib/postgresql/data:rw
      # you may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./api/docker/db/data:/var/lib/postgresql/data:rw

  payment:
    image: node:14-alpine3.11
    working_dir: /app
    env_file: ./payments_microservice/.env
    volumes:
      - ./payments_microservice/:/app
    ports:
      - 3000:3000
    command: sh -c "npm i && npm run dev"

  payments_microservice_database:
      image: mongo
      environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: example
        MONGO_INITDB_DATABASE: test
      ports:
        - 27017:27017
  product_microservice_database:
    image: mongo
    networks:
      - micro-service
    ports:
      - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./ProductCollections:/usr/local/productCollections
    working_dir: /usr/local/productCollections

  product:
    image: node:lts
    working_dir: /app
    networks:
      - micro-service
    volumes:
      - ./products_microservice:/app
    env_file:
      - ./products_microservice/.env
    ports:
      - 3000:3000
    command: sh -c "npm i && npm run start"

networks:
  micro-service:
    driver: bridge

volumes:
  php_socket:
  db_data:
  caddy_data:
  caddy_config:
